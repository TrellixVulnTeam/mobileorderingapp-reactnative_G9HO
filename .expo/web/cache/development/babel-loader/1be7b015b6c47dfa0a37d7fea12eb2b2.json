{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as firebase from 'firebase';\nimport firestore from 'firestore';\nimport { firebaseConfig } from \"./config\";\n\nvar FirebaseAPI = function () {\n  function FirebaseAPI() {\n    _classCallCheck(this, FirebaseAPI);\n\n    firebase.initializeApp(firebaseConfig);\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        isSignedIn = true;\n      } else {\n        isSignedIn = false;\n      }\n    });\n  }\n\n  _createClass(FirebaseAPI, [{\n    key: \"getUser\",\n    value: function getUser() {\n      var user = firebase.auth().currentUser;\n      return user;\n    }\n  }, {\n    key: \"getUserDocument\",\n    value: function getUserDocument(uid) {\n      var userDocument;\n      return _regeneratorRuntime.async(function getUserDocument$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(firestore().collection('Users').doc(uid).get());\n\n            case 2:\n              userDocument = _context.sent;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      firebase.auth().signOut();\n    }\n  }, {\n    key: \"signUp\",\n    value: function signUp(firstName, lastName, phoneNumber, email, password) {\n      var uid;\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(function (cred) {\n        console.log('User account created & signed in!');\n        uid = cred.user.uid;\n      }).then(function () {\n        firebase.firestore().collection('Users').doc(uid).set({\n          firstName: firstName,\n          lastName: lastName,\n          phoneNumber: phoneNumber,\n          email: email,\n          password: password\n        }).then(function () {\n          console.log('User added!');\n          user = firebase.auth().currentUser;\n        });\n      }).catch(function (error) {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('That email address is already in use!');\n        }\n\n        if (error.code === 'auth/invalid-email') {\n          console.log('That email address is invalid!');\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(email, password) {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(function (cred) {\n        return true;\n      }).catch(function (error) {\n        return false;\n      });\n    }\n  }, {\n    key: \"updateFirstName\",\n    value: function updateFirstName(firstName) {\n      var _this = this;\n\n      var user = this.getUser();\n      var userDocument = firebaseController.firestore().collection('Users').doc(user.uid).onSnapshot(function (doc) {\n        _this.firstName = doc.data().firstName;\n      });\n    }\n  }, {\n    key: \"updateLastName\",\n    value: function updateLastName(lastName) {\n      var _this2 = this;\n\n      var user = this.getUser();\n      var userDocument = firebaseController.firestore().collection('Users').doc(user.uid).onSnapshot(function (doc) {\n        _this2.lastName = doc.data().lastName;\n      });\n    }\n  }, {\n    key: \"updatePhoneNumber\",\n    value: function updatePhoneNumber(phoneNumber) {\n      var _this3 = this;\n\n      var user = this.getUser();\n      var userDocument = firebaseController.firestore().collection('Users').doc(user.uid).onSnapshot(function (doc) {\n        _this3.phoneNumber = doc.data().phoneNumber;\n      });\n    }\n  }, {\n    key: \"createUserDocumentAndStore\",\n    value: function createUserDocumentAndStore() {\n      var _this4 = this;\n\n      var user = this.getUser();\n      var userDocument = firebaseController.firestore().collection('Users').doc(user.uid).onSnapshot(function (doc) {\n        _this4.firstName = doc.data().firstName;\n        _this4.lastName = doc.data().lastName;\n        _this4.phoneNumber = doc.data().phoneNumber;\n        _this4.email = doc.data().email;\n      });\n    }\n  }]);\n\n  return FirebaseAPI;\n}();\n\nvar firebaseApp = new FirebaseAPI();\nexport { firebaseApp };","map":{"version":3,"sources":["C:/Users/tjhar/Documents/GitHub/mobileorderingapp-reactnative/src/api/firebase.js"],"names":["firebase","firestore","firebaseConfig","FirebaseAPI","initializeApp","auth","onAuthStateChanged","user","isSignedIn","currentUser","uid","collection","doc","get","userDocument","signOut","firstName","lastName","phoneNumber","email","password","createUserWithEmailAndPassword","then","cred","console","log","set","catch","error","code","signInWithEmailAndPassword","getUser","firebaseController","onSnapshot","data","firebaseApp"],"mappings":";;;AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAAQC,cAAR;;IAIMC,W;AAEJ,yBAAc;AAAA;;AACZH,IAAAA,QAAQ,CAACI,aAAT,CAAuBF,cAAvB;AAEAF,IAAAA,QAAQ,CAACK,IAAT,GAAgBC,kBAAhB,CAAmC,UAASC,IAAT,EAAe;AAClD,UAAIA,IAAJ,EAAU;AAERC,QAAAA,UAAU,GAAG,IAAb;AACD,OAHD,MAGO;AAELA,QAAAA,UAAU,GAAG,KAAb;AACD;AACF,KARC;AASD;;;;8BAES;AACR,UAAMD,IAAI,GAAGP,QAAQ,CAACK,IAAT,GAAgBI,WAA7B;AACA,aAAOF,IAAP;AACD;;;oCACqBG,G;;;;;;;+CACOT,SAAS,GACnCU,UAD0B,CACf,OADe,EAE1BC,GAF0B,CAEtBF,GAFsB,EAG1BG,GAH0B,E;;;AAArBC,cAAAA,Y;;;;;;;;;;;8BAKC;AACPd,MAAAA,QAAQ,CAACK,IAAT,GAAgBU,OAAhB;AACD;;;2BACMC,S,EAAUC,Q,EAASC,W,EAAYC,K,EAAMC,Q,EAAS;AACnD,UAAIV,GAAJ;AACAV,MAAAA,QAAQ,CAACK,IAAT,GACCgB,8BADD,CACgCF,KADhC,EACuCC,QADvC,EAECE,IAFD,CAEM,UAAAC,IAAI,EAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAf,QAAAA,GAAG,GAAGa,IAAI,CAAChB,IAAL,CAAUG,GAAhB;AACD,OALD,EAMCY,IAND,CAMM,YAAM;AACZtB,QAAAA,QAAQ,CAACC,SAAT,GACCU,UADD,CACY,OADZ,EAECC,GAFD,CAEKF,GAFL,EAGCgB,GAHD,CAGK;AACHV,UAAAA,SAAS,EAAEA,SADR;AAEHC,UAAAA,QAAQ,EAAEA,QAFP;AAGHC,UAAAA,WAAW,EAAEA,WAHV;AAIHC,UAAAA,KAAK,EAAEA,KAJJ;AAKHC,UAAAA,QAAQ,EAAEA;AALP,SAHL,EAUCE,IAVD,CAUM,YAAM;AACVE,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAlB,UAAAA,IAAI,GAAGP,QAAQ,CAACK,IAAT,GAAgBI,WAAvB;AACD,SAbD;AAeC,OAtBD,EAuBCkB,KAvBD,CAuBO,UAAAC,KAAK,EAAI;AACd,YAAIA,KAAK,CAACC,IAAN,KAAe,2BAAnB,EAAgD;AAC9CL,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACD;;AAED,YAAIG,KAAK,CAACC,IAAN,KAAe,oBAAnB,EAAyC;AACvCL,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,OA/BD;AAgCD;;;2BAEMN,K,EAAMC,Q,EAAS;AACpBpB,MAAAA,QAAQ,CAACK,IAAT,GAAgByB,0BAAhB,CAA2CX,KAA3C,EAAkDC,QAAlD,EAA4DE,IAA5D,CAAiE,UAAAC,IAAI,EAAI;AACvE,eAAO,IAAP;AACD,OAFD,EAGCI,KAHD,CAGO,UAASC,KAAT,EAAgB;AACrB,eAAO,KAAP;AACD,OALD;AAMD;;;oCAEeZ,S,EAAW;AAAA;;AACzB,UAAIT,IAAI,GAAG,KAAKwB,OAAL,EAAX;AACA,UAAMjB,YAAY,GAAGkB,kBAAkB,CAAC/B,SAAnB,GAClBU,UADkB,CACP,OADO,EACEC,GADF,CACML,IAAI,CAACG,GADX,EAElBuB,UAFkB,CAEP,UAAArB,GAAG,EAAI;AACjB,QAAA,KAAI,CAACI,SAAL,GAAiBJ,GAAG,CAACsB,IAAJ,GAAWlB,SAA5B;AACH,OAJoB,CAArB;AAKD;;;mCACcC,Q,EAAU;AAAA;;AACvB,UAAIV,IAAI,GAAG,KAAKwB,OAAL,EAAX;AACA,UAAMjB,YAAY,GAAGkB,kBAAkB,CAAC/B,SAAnB,GAClBU,UADkB,CACP,OADO,EACEC,GADF,CACML,IAAI,CAACG,GADX,EAElBuB,UAFkB,CAEP,UAAArB,GAAG,EAAI;AACjB,QAAA,MAAI,CAACK,QAAL,GAAgBL,GAAG,CAACsB,IAAJ,GAAWjB,QAA3B;AACH,OAJoB,CAArB;AAKD;;;sCACiBC,W,EAAa;AAAA;;AAC7B,UAAIX,IAAI,GAAG,KAAKwB,OAAL,EAAX;AACA,UAAMjB,YAAY,GAAGkB,kBAAkB,CAAC/B,SAAnB,GAClBU,UADkB,CACP,OADO,EACEC,GADF,CACML,IAAI,CAACG,GADX,EAElBuB,UAFkB,CAEP,UAAArB,GAAG,EAAI;AACjB,QAAA,MAAI,CAACM,WAAL,GAAmBN,GAAG,CAACsB,IAAJ,GAAWhB,WAA9B;AACH,OAJoB,CAArB;AAKD;;;iDAC4B;AAAA;;AAC3B,UAAIX,IAAI,GAAG,KAAKwB,OAAL,EAAX;AACA,UAAMjB,YAAY,GAAGkB,kBAAkB,CAAC/B,SAAnB,GAClBU,UADkB,CACP,OADO,EACEC,GADF,CACML,IAAI,CAACG,GADX,EAElBuB,UAFkB,CAEP,UAAArB,GAAG,EAAI;AACjB,QAAA,MAAI,CAACI,SAAL,GAAiBJ,GAAG,CAACsB,IAAJ,GAAWlB,SAA5B;AACA,QAAA,MAAI,CAACC,QAAL,GAAgBL,GAAG,CAACsB,IAAJ,GAAWjB,QAA3B;AACA,QAAA,MAAI,CAACC,WAAL,GAAmBN,GAAG,CAACsB,IAAJ,GAAWhB,WAA9B;AACA,QAAA,MAAI,CAACC,KAAL,GAAaP,GAAG,CAACsB,IAAJ,GAAWf,KAAxB;AACH,OAPoB,CAArB;AAQD;;;;;;AAIH,IAAMgB,WAAW,GAAG,IAAIhC,WAAJ,EAApB;AAEA,SAAQgC,WAAR","sourcesContent":["import * as firebase from 'firebase';\r\nimport firestore from 'firestore';\r\nimport {firebaseConfig} from './config';\r\n\r\n\r\n\r\nclass FirebaseAPI {\r\n\r\n  constructor() {\r\n    firebase.initializeApp(firebaseConfig);\r\n    // this.user = firebase.auth().currentUser;\r\n    firebase.auth().onAuthStateChanged(function(user) {\r\n    if (user) {\r\n      // User is signed in.\r\n      isSignedIn = true;\r\n    } else {\r\n      // No user is signed in.\r\n      isSignedIn = false;\r\n    }\r\n  });\r\n  }\r\n  \r\n  getUser() {\r\n    const user = firebase.auth().currentUser;\r\n    return user;\r\n  }\r\n  async getUserDocument(uid) {\r\n    const userDocument = await firestore()\r\n    .collection('Users')\r\n    .doc(uid)\r\n    .get();\r\n  }\r\n  signOut(){\r\n    firebase.auth().signOut();\r\n  }\r\n  signUp(firstName,lastName,phoneNumber,email,password){\r\n    var uid;\r\n    firebase.auth()\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .then(cred => {\r\n      console.log('User account created & signed in!');\r\n      uid = cred.user.uid\r\n    })\r\n    .then(() => {\r\n    firebase.firestore()\r\n    .collection('Users')\r\n    .doc(uid)\r\n    .set({\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      phoneNumber: phoneNumber,\r\n      email: email,\r\n      password: password\r\n    })\r\n    .then(() => {\r\n      console.log('User added!');\r\n      user = firebase.auth().currentUser\r\n    });\r\n  \r\n    })\r\n    .catch(error => {\r\n      if (error.code === 'auth/email-already-in-use') {\r\n        console.log('That email address is already in use!');\r\n      }\r\n  \r\n      if (error.code === 'auth/invalid-email') {\r\n        console.log('That email address is invalid!');\r\n      }\r\n    });\r\n  }\r\n\r\n  signIn(email,password){\r\n    firebase.auth().signInWithEmailAndPassword(email, password).then(cred => {\r\n      return true;\r\n    })\r\n    .catch(function(error) {\r\n      return false;\r\n    })           \r\n  }\r\n  // Function that First Name, Last Name and Phone Numnber \r\n  updateFirstName(firstName) {\r\n    let user = this.getUser();\r\n    const userDocument = firebaseController.firestore()\r\n      .collection('Users').doc(user.uid)\r\n      .onSnapshot(doc => {\r\n        this.firstName = doc.data().firstName;\r\n    })\r\n  }\r\n  updateLastName(lastName) {\r\n    let user = this.getUser();\r\n    const userDocument = firebaseController.firestore()\r\n      .collection('Users').doc(user.uid)\r\n      .onSnapshot(doc => {\r\n        this.lastName = doc.data().lastName;\r\n    })\r\n  }\r\n  updatePhoneNumber(phoneNumber) {\r\n    let user = this.getUser();\r\n    const userDocument = firebaseController.firestore()\r\n      .collection('Users').doc(user.uid)\r\n      .onSnapshot(doc => {\r\n        this.phoneNumber = doc.data().phoneNumber;\r\n    })\r\n  }\r\n  createUserDocumentAndStore() {\r\n    let user = this.getUser();\r\n    const userDocument = firebaseController.firestore()\r\n      .collection('Users').doc(user.uid)\r\n      .onSnapshot(doc => {\r\n        this.firstName = doc.data().firstName;\r\n        this.lastName = doc.data().lastName;\r\n        this.phoneNumber = doc.data().phoneNumber;\r\n        this.email = doc.data().email;\r\n    })\r\n  }\r\n\r\n}\r\n  \r\nconst firebaseApp = new FirebaseAPI();\r\n\r\nexport {firebaseApp};"]},"metadata":{},"sourceType":"module"}